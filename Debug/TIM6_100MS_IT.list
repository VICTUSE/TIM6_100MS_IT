
TIM6_100MS_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ec0  08000ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ec0  08000ec0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ec0  08000ec0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ec0  08000ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ec0  08000ec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ec4  08000ec4  00010ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08000ed4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000ed4  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006ab0  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011de  00000000  00000000  00026b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  00027d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063a  00000000  00000000  00028510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b24  00000000  00000000  00028b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008fec  00000000  00000000  0004166e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092bd0  00000000  00000000  0004a65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ca0  00000000  00000000  000dd22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000deecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000ea8 	.word	0x08000ea8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08000ea8 	.word	0x08000ea8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

TIM_HandleTypeDef htimer6;


int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_Init();
 8000224:	f000 f8dc 	bl	80003e0 <HAL_Init>
	SystemClockConfig();
 8000228:	f000 f80e 	bl	8000248 <SystemClockConfig>

	GPIO_Init();
 800022c:	f000 f83c 	bl	80002a8 <GPIO_Init>

	TIMER6_Init();
 8000230:	f000 f810 	bl	8000254 <TIMER6_Init>


	/*
	 * START TÄ°MER
	 *  */
	HAL_TIM_Base_Start_IT(&htimer6);
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <main+0x24>)
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fbfa 	bl	8000a30 <HAL_TIM_Base_Start_IT>





	return 0;
 800023c:	2300      	movs	r3, #0
}
 800023e:	0018      	movs	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	20000028 	.word	0x20000028

08000248 <SystemClockConfig>:

void SystemClockConfig(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0

}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <TIMER6_Init>:


void TIMER6_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <TIMER6_Init+0x2c>)
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <TIMER6_Init+0x30>)
 800025c:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 7;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <TIMER6_Init+0x2c>)
 8000260:	2207      	movs	r2, #7
 8000262:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 60000 - 1;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <TIMER6_Init+0x2c>)
 8000266:	4a08      	ldr	r2, [pc, #32]	; (8000288 <TIMER6_Init+0x34>)
 8000268:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer6) != HAL_OK)
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <TIMER6_Init+0x2c>)
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fb8e 	bl	800098e <HAL_TIM_Base_Init>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d001      	beq.n	800027a <TIMER6_Init+0x26>
	{
		Error_handler();
 8000276:	f000 f83f 	bl	80002f8 <Error_handler>
	}

}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000028 	.word	0x20000028
 8000284:	40001000 	.word	0x40001000
 8000288:	0000ea5f 	.word	0x0000ea5f

0800028c <HAL_TIM_PeriodElapsedCallback>:
/*
 * An IRQ can be generated by different events of the same peripheral,
 * in order to write specific functions for that particular event, a callback function is being used inside which the user code is defined.
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000294:	2390      	movs	r3, #144	; 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2120      	movs	r1, #32
 800029a:	0018      	movs	r0, r3
 800029c:	f000 fb5c 	bl	8000958 <HAL_GPIO_TogglePin>
}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b002      	add	sp, #8
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <GPIO_Init>:


void GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <GPIO_Init+0x4c>)
 80002b0:	695a      	ldr	r2, [r3, #20]
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <GPIO_Init+0x4c>)
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	0289      	lsls	r1, r1, #10
 80002b8:	430a      	orrs	r2, r1
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <GPIO_Init+0x4c>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	029b      	lsls	r3, r3, #10
 80002c4:	4013      	ands	r3, r2
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2220      	movs	r2, #32
 80002ce:	601a      	str	r2, [r3, #0]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2201      	movs	r2, #1
 80002d4:	605a      	str	r2, [r3, #4]
	ledgpio.Pull = GPIO_NOPULL;
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80002dc:	1d3a      	adds	r2, r7, #4
 80002de:	2390      	movs	r3, #144	; 0x90
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	0011      	movs	r1, r2
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 f9bf 	bl	8000668 <HAL_GPIO_Init>
}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b006      	add	sp, #24
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	40021000 	.word	0x40021000

080002f8 <Error_handler>:


void Error_handler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	while(1);
 80002fc:	e7fe      	b.n	80002fc <Error_handler+0x4>

080002fe <HAL_MspInit>:
#include "stm32f0xx_hal.h"

void HAL_MspInit(void)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	af00      	add	r7, sp, #0
	//1. Set up yhe priority grouping pf the arm cortex mx processor

	//2. Enable the required system exceptions of the arm cortex mx processor

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(HardFault_IRQn,0,0);
 8000302:	230d      	movs	r3, #13
 8000304:	425b      	negs	r3, r3
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	0018      	movs	r0, r3
 800030c:	f000 f96e 	bl	80005ec <HAL_NVIC_SetPriority>

}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	//1. Enable the clock for TIM6
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000320:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <HAL_TIM_Base_MspInit+0x38>)
 8000322:	69da      	ldr	r2, [r3, #28]
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_TIM_Base_MspInit+0x38>)
 8000326:	2110      	movs	r1, #16
 8000328:	430a      	orrs	r2, r1
 800032a:	61da      	str	r2, [r3, #28]
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <HAL_TIM_Base_MspInit+0x38>)
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	2210      	movs	r2, #16
 8000332:	4013      	ands	r3, r2
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000338:	2011      	movs	r0, #17
 800033a:	f000 f96c 	bl	8000616 <HAL_NVIC_EnableIRQ>

	//3. SET priority
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2100      	movs	r1, #0
 8000342:	2011      	movs	r0, #17
 8000344:	f000 f952 	bl	80005ec <HAL_NVIC_SetPriority>
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000

08000354 <SysTick_Handler>:
#include <main.h>
extern TIM_HandleTypeDef htimer6;

void SysTick_Handler (void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000358:	f000 f88a 	bl	8000470 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800035c:	f000 f978 	bl	8000650 <HAL_SYSTICK_IRQHandler>

}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <TIM6_DAC_IRQHandler+0x14>)
 800036e:	0018      	movs	r0, r3
 8000370:	f000 fbb0 	bl	8000ad4 <HAL_TIM_IRQHandler>
}
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	20000028 	.word	0x20000028

08000380 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000390:	f7ff fff6 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490d      	ldr	r1, [pc, #52]	; (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 fd51 	bl	8000e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff ff2f 	bl	8000220 <main>

080003c2 <LoopForever>:

LoopForever:
    b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003d0:	08000ec8 	.word	0x08000ec8
  ldr r2, =_sbss
 80003d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003d8:	20000074 	.word	0x20000074

080003dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC1_COMP_IRQHandler>
	...

080003e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <HAL_Init+0x24>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <HAL_Init+0x24>)
 80003ea:	2110      	movs	r1, #16
 80003ec:	430a      	orrs	r2, r1
 80003ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f809 	bl	8000408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003f6:	f7ff ff82 	bl	80002fe <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40022000 	.word	0x40022000

08000408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000410:	4b14      	ldr	r3, [pc, #80]	; (8000464 <HAL_InitTick+0x5c>)
 8000412:	681c      	ldr	r4, [r3, #0]
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <HAL_InitTick+0x60>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	0019      	movs	r1, r3
 800041a:	23fa      	movs	r3, #250	; 0xfa
 800041c:	0098      	lsls	r0, r3, #2
 800041e:	f7ff fe73 	bl	8000108 <__udivsi3>
 8000422:	0003      	movs	r3, r0
 8000424:	0019      	movs	r1, r3
 8000426:	0020      	movs	r0, r4
 8000428:	f7ff fe6e 	bl	8000108 <__udivsi3>
 800042c:	0003      	movs	r3, r0
 800042e:	0018      	movs	r0, r3
 8000430:	f000 f901 	bl	8000636 <HAL_SYSTICK_Config>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000438:	2301      	movs	r3, #1
 800043a:	e00f      	b.n	800045c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b03      	cmp	r3, #3
 8000440:	d80b      	bhi.n	800045a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	2301      	movs	r3, #1
 8000446:	425b      	negs	r3, r3
 8000448:	2200      	movs	r2, #0
 800044a:	0018      	movs	r0, r3
 800044c:	f000 f8ce 	bl	80005ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <HAL_InitTick+0x64>)
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000456:	2300      	movs	r3, #0
 8000458:	e000      	b.n	800045c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800045a:	2301      	movs	r3, #1
}
 800045c:	0018      	movs	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	b003      	add	sp, #12
 8000462:	bd90      	pop	{r4, r7, pc}
 8000464:	20000000 	.word	0x20000000
 8000468:	20000008 	.word	0x20000008
 800046c:	20000004 	.word	0x20000004

08000470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <HAL_IncTick+0x1c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	001a      	movs	r2, r3
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <HAL_IncTick+0x20>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	18d2      	adds	r2, r2, r3
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <HAL_IncTick+0x20>)
 8000482:	601a      	str	r2, [r3, #0]
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	20000008 	.word	0x20000008
 8000490:	20000070 	.word	0x20000070

08000494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	0002      	movs	r2, r0
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b7f      	cmp	r3, #127	; 0x7f
 80004a6:	d809      	bhi.n	80004bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	001a      	movs	r2, r3
 80004ae:	231f      	movs	r3, #31
 80004b0:	401a      	ands	r2, r3
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <__NVIC_EnableIRQ+0x30>)
 80004b4:	2101      	movs	r1, #1
 80004b6:	4091      	lsls	r1, r2
 80004b8:	000a      	movs	r2, r1
 80004ba:	601a      	str	r2, [r3, #0]
  }
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b002      	add	sp, #8
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	e000e100 	.word	0xe000e100

080004c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	0002      	movs	r2, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b7f      	cmp	r3, #127	; 0x7f
 80004dc:	d828      	bhi.n	8000530 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004de:	4a2f      	ldr	r2, [pc, #188]	; (800059c <__NVIC_SetPriority+0xd4>)
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	089b      	lsrs	r3, r3, #2
 80004e8:	33c0      	adds	r3, #192	; 0xc0
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	589b      	ldr	r3, [r3, r2]
 80004ee:	1dfa      	adds	r2, r7, #7
 80004f0:	7812      	ldrb	r2, [r2, #0]
 80004f2:	0011      	movs	r1, r2
 80004f4:	2203      	movs	r2, #3
 80004f6:	400a      	ands	r2, r1
 80004f8:	00d2      	lsls	r2, r2, #3
 80004fa:	21ff      	movs	r1, #255	; 0xff
 80004fc:	4091      	lsls	r1, r2
 80004fe:	000a      	movs	r2, r1
 8000500:	43d2      	mvns	r2, r2
 8000502:	401a      	ands	r2, r3
 8000504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	019b      	lsls	r3, r3, #6
 800050a:	22ff      	movs	r2, #255	; 0xff
 800050c:	401a      	ands	r2, r3
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	0018      	movs	r0, r3
 8000514:	2303      	movs	r3, #3
 8000516:	4003      	ands	r3, r0
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051c:	481f      	ldr	r0, [pc, #124]	; (800059c <__NVIC_SetPriority+0xd4>)
 800051e:	1dfb      	adds	r3, r7, #7
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b25b      	sxtb	r3, r3
 8000524:	089b      	lsrs	r3, r3, #2
 8000526:	430a      	orrs	r2, r1
 8000528:	33c0      	adds	r3, #192	; 0xc0
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800052e:	e031      	b.n	8000594 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <__NVIC_SetPriority+0xd8>)
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	0019      	movs	r1, r3
 8000538:	230f      	movs	r3, #15
 800053a:	400b      	ands	r3, r1
 800053c:	3b08      	subs	r3, #8
 800053e:	089b      	lsrs	r3, r3, #2
 8000540:	3306      	adds	r3, #6
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	18d3      	adds	r3, r2, r3
 8000546:	3304      	adds	r3, #4
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	1dfa      	adds	r2, r7, #7
 800054c:	7812      	ldrb	r2, [r2, #0]
 800054e:	0011      	movs	r1, r2
 8000550:	2203      	movs	r2, #3
 8000552:	400a      	ands	r2, r1
 8000554:	00d2      	lsls	r2, r2, #3
 8000556:	21ff      	movs	r1, #255	; 0xff
 8000558:	4091      	lsls	r1, r2
 800055a:	000a      	movs	r2, r1
 800055c:	43d2      	mvns	r2, r2
 800055e:	401a      	ands	r2, r3
 8000560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	019b      	lsls	r3, r3, #6
 8000566:	22ff      	movs	r2, #255	; 0xff
 8000568:	401a      	ands	r2, r3
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	0018      	movs	r0, r3
 8000570:	2303      	movs	r3, #3
 8000572:	4003      	ands	r3, r0
 8000574:	00db      	lsls	r3, r3, #3
 8000576:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000578:	4809      	ldr	r0, [pc, #36]	; (80005a0 <__NVIC_SetPriority+0xd8>)
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	001c      	movs	r4, r3
 8000580:	230f      	movs	r3, #15
 8000582:	4023      	ands	r3, r4
 8000584:	3b08      	subs	r3, #8
 8000586:	089b      	lsrs	r3, r3, #2
 8000588:	430a      	orrs	r2, r1
 800058a:	3306      	adds	r3, #6
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	18c3      	adds	r3, r0, r3
 8000590:	3304      	adds	r3, #4
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b003      	add	sp, #12
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	e000e100 	.word	0xe000e100
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	045b      	lsls	r3, r3, #17
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d301      	bcc.n	80005bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005b8:	2301      	movs	r3, #1
 80005ba:	e010      	b.n	80005de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <SysTick_Config+0x44>)
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	3a01      	subs	r2, #1
 80005c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005c4:	2301      	movs	r3, #1
 80005c6:	425b      	negs	r3, r3
 80005c8:	2103      	movs	r1, #3
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff ff7c 	bl	80004c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <SysTick_Config+0x44>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <SysTick_Config+0x44>)
 80005d8:	2207      	movs	r2, #7
 80005da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005dc:	2300      	movs	r3, #0
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	e000e010 	.word	0xe000e010

080005ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
 80005f6:	210f      	movs	r1, #15
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	1c02      	adds	r2, r0, #0
 80005fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	187b      	adds	r3, r7, r1
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b25b      	sxtb	r3, r3
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff ff5d 	bl	80004c8 <__NVIC_SetPriority>
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b004      	add	sp, #16
 8000614:	bd80      	pop	{r7, pc}

08000616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	0002      	movs	r2, r0
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b25b      	sxtb	r3, r3
 8000628:	0018      	movs	r0, r3
 800062a:	f7ff ff33 	bl	8000494 <__NVIC_EnableIRQ>
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}

08000636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff ffaf 	bl	80005a4 <SysTick_Config>
 8000646:	0003      	movs	r3, r0
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}

08000650 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000654:	f000 f803 	bl	800065e <HAL_SYSTICK_Callback>
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000676:	e155      	b.n	8000924 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2101      	movs	r1, #1
 800067e:	697a      	ldr	r2, [r7, #20]
 8000680:	4091      	lsls	r1, r2
 8000682:	000a      	movs	r2, r1
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d100      	bne.n	8000690 <HAL_GPIO_Init+0x28>
 800068e:	e146      	b.n	800091e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	2203      	movs	r2, #3
 8000696:	4013      	ands	r3, r2
 8000698:	2b01      	cmp	r3, #1
 800069a:	d005      	beq.n	80006a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	2203      	movs	r2, #3
 80006a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d130      	bne.n	800070a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	2203      	movs	r2, #3
 80006b4:	409a      	lsls	r2, r3
 80006b6:	0013      	movs	r3, r2
 80006b8:	43da      	mvns	r2, r3
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	4013      	ands	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	409a      	lsls	r2, r3
 80006ca:	0013      	movs	r3, r2
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006de:	2201      	movs	r2, #1
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	409a      	lsls	r2, r3
 80006e4:	0013      	movs	r3, r2
 80006e6:	43da      	mvns	r2, r3
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	4013      	ands	r3, r2
 80006ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	091b      	lsrs	r3, r3, #4
 80006f4:	2201      	movs	r2, #1
 80006f6:	401a      	ands	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	409a      	lsls	r2, r3
 80006fc:	0013      	movs	r3, r2
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	4313      	orrs	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	2203      	movs	r2, #3
 8000710:	4013      	ands	r3, r2
 8000712:	2b03      	cmp	r3, #3
 8000714:	d017      	beq.n	8000746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	2203      	movs	r2, #3
 8000722:	409a      	lsls	r2, r3
 8000724:	0013      	movs	r3, r2
 8000726:	43da      	mvns	r2, r3
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	4013      	ands	r3, r2
 800072c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	409a      	lsls	r2, r3
 8000738:	0013      	movs	r3, r2
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	4313      	orrs	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	2203      	movs	r2, #3
 800074c:	4013      	ands	r3, r2
 800074e:	2b02      	cmp	r3, #2
 8000750:	d123      	bne.n	800079a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	08da      	lsrs	r2, r3, #3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3208      	adds	r2, #8
 800075a:	0092      	lsls	r2, r2, #2
 800075c:	58d3      	ldr	r3, [r2, r3]
 800075e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	2207      	movs	r2, #7
 8000764:	4013      	ands	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	220f      	movs	r2, #15
 800076a:	409a      	lsls	r2, r3
 800076c:	0013      	movs	r3, r2
 800076e:	43da      	mvns	r2, r3
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	4013      	ands	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	691a      	ldr	r2, [r3, #16]
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	2107      	movs	r1, #7
 800077e:	400b      	ands	r3, r1
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	409a      	lsls	r2, r3
 8000784:	0013      	movs	r3, r2
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	4313      	orrs	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	08da      	lsrs	r2, r3, #3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3208      	adds	r2, #8
 8000794:	0092      	lsls	r2, r2, #2
 8000796:	6939      	ldr	r1, [r7, #16]
 8000798:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	2203      	movs	r2, #3
 80007a6:	409a      	lsls	r2, r3
 80007a8:	0013      	movs	r3, r2
 80007aa:	43da      	mvns	r2, r3
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4013      	ands	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2203      	movs	r2, #3
 80007b8:	401a      	ands	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	409a      	lsls	r2, r3
 80007c0:	0013      	movs	r3, r2
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	23c0      	movs	r3, #192	; 0xc0
 80007d4:	029b      	lsls	r3, r3, #10
 80007d6:	4013      	ands	r3, r2
 80007d8:	d100      	bne.n	80007dc <HAL_GPIO_Init+0x174>
 80007da:	e0a0      	b.n	800091e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007dc:	4b57      	ldr	r3, [pc, #348]	; (800093c <HAL_GPIO_Init+0x2d4>)
 80007de:	699a      	ldr	r2, [r3, #24]
 80007e0:	4b56      	ldr	r3, [pc, #344]	; (800093c <HAL_GPIO_Init+0x2d4>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	430a      	orrs	r2, r1
 80007e6:	619a      	str	r2, [r3, #24]
 80007e8:	4b54      	ldr	r3, [pc, #336]	; (800093c <HAL_GPIO_Init+0x2d4>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80007f4:	4a52      	ldr	r2, [pc, #328]	; (8000940 <HAL_GPIO_Init+0x2d8>)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	3302      	adds	r3, #2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	589b      	ldr	r3, [r3, r2]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	2203      	movs	r2, #3
 8000806:	4013      	ands	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	220f      	movs	r2, #15
 800080c:	409a      	lsls	r2, r3
 800080e:	0013      	movs	r3, r2
 8000810:	43da      	mvns	r2, r3
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	2390      	movs	r3, #144	; 0x90
 800081c:	05db      	lsls	r3, r3, #23
 800081e:	429a      	cmp	r2, r3
 8000820:	d019      	beq.n	8000856 <HAL_GPIO_Init+0x1ee>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a47      	ldr	r2, [pc, #284]	; (8000944 <HAL_GPIO_Init+0x2dc>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d013      	beq.n	8000852 <HAL_GPIO_Init+0x1ea>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a46      	ldr	r2, [pc, #280]	; (8000948 <HAL_GPIO_Init+0x2e0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d00d      	beq.n	800084e <HAL_GPIO_Init+0x1e6>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a45      	ldr	r2, [pc, #276]	; (800094c <HAL_GPIO_Init+0x2e4>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d007      	beq.n	800084a <HAL_GPIO_Init+0x1e2>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a44      	ldr	r2, [pc, #272]	; (8000950 <HAL_GPIO_Init+0x2e8>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d101      	bne.n	8000846 <HAL_GPIO_Init+0x1de>
 8000842:	2304      	movs	r3, #4
 8000844:	e008      	b.n	8000858 <HAL_GPIO_Init+0x1f0>
 8000846:	2305      	movs	r3, #5
 8000848:	e006      	b.n	8000858 <HAL_GPIO_Init+0x1f0>
 800084a:	2303      	movs	r3, #3
 800084c:	e004      	b.n	8000858 <HAL_GPIO_Init+0x1f0>
 800084e:	2302      	movs	r3, #2
 8000850:	e002      	b.n	8000858 <HAL_GPIO_Init+0x1f0>
 8000852:	2301      	movs	r3, #1
 8000854:	e000      	b.n	8000858 <HAL_GPIO_Init+0x1f0>
 8000856:	2300      	movs	r3, #0
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	2103      	movs	r1, #3
 800085c:	400a      	ands	r2, r1
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	4093      	lsls	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4313      	orrs	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000868:	4935      	ldr	r1, [pc, #212]	; (8000940 <HAL_GPIO_Init+0x2d8>)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	3302      	adds	r3, #2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000876:	4b37      	ldr	r3, [pc, #220]	; (8000954 <HAL_GPIO_Init+0x2ec>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	43da      	mvns	r2, r3
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	035b      	lsls	r3, r3, #13
 800088e:	4013      	ands	r3, r2
 8000890:	d003      	beq.n	800089a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <HAL_GPIO_Init+0x2ec>)
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <HAL_GPIO_Init+0x2ec>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	43da      	mvns	r2, r3
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	039b      	lsls	r3, r3, #14
 80008b8:	4013      	ands	r3, r2
 80008ba:	d003      	beq.n	80008c4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <HAL_GPIO_Init+0x2ec>)
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <HAL_GPIO_Init+0x2ec>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	43da      	mvns	r2, r3
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	029b      	lsls	r3, r3, #10
 80008e2:	4013      	ands	r3, r2
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_GPIO_Init+0x2ec>)
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_GPIO_Init+0x2ec>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	43da      	mvns	r2, r3
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	025b      	lsls	r3, r3, #9
 800090c:	4013      	ands	r3, r2
 800090e:	d003      	beq.n	8000918 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_GPIO_Init+0x2ec>)
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	40da      	lsrs	r2, r3
 800092c:	1e13      	subs	r3, r2, #0
 800092e:	d000      	beq.n	8000932 <HAL_GPIO_Init+0x2ca>
 8000930:	e6a2      	b.n	8000678 <HAL_GPIO_Init+0x10>
  } 
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b006      	add	sp, #24
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	40010000 	.word	0x40010000
 8000944:	48000400 	.word	0x48000400
 8000948:	48000800 	.word	0x48000800
 800094c:	48000c00 	.word	0x48000c00
 8000950:	48001000 	.word	0x48001000
 8000954:	40010400 	.word	0x40010400

08000958 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	000a      	movs	r2, r1
 8000962:	1cbb      	adds	r3, r7, #2
 8000964:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800096c:	1cbb      	adds	r3, r7, #2
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	4013      	ands	r3, r2
 8000974:	041a      	lsls	r2, r3, #16
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	43db      	mvns	r3, r3
 800097a:	1cb9      	adds	r1, r7, #2
 800097c:	8809      	ldrh	r1, [r1, #0]
 800097e:	400b      	ands	r3, r1
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	619a      	str	r2, [r3, #24]
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b004      	add	sp, #16
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e042      	b.n	8000a26 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	223d      	movs	r2, #61	; 0x3d
 80009a4:	5c9b      	ldrb	r3, [r3, r2]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d107      	bne.n	80009bc <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	223c      	movs	r2, #60	; 0x3c
 80009b0:	2100      	movs	r1, #0
 80009b2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	0018      	movs	r0, r3
 80009b8:	f7ff fcae 	bl	8000318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	223d      	movs	r2, #61	; 0x3d
 80009c0:	2102      	movs	r1, #2
 80009c2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3304      	adds	r3, #4
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f000 f9b6 	bl	8000d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2246      	movs	r2, #70	; 0x46
 80009d8:	2101      	movs	r1, #1
 80009da:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	223e      	movs	r2, #62	; 0x3e
 80009e0:	2101      	movs	r1, #1
 80009e2:	5499      	strb	r1, [r3, r2]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	223f      	movs	r2, #63	; 0x3f
 80009e8:	2101      	movs	r1, #1
 80009ea:	5499      	strb	r1, [r3, r2]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	2101      	movs	r1, #1
 80009f2:	5499      	strb	r1, [r3, r2]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2241      	movs	r2, #65	; 0x41
 80009f8:	2101      	movs	r1, #1
 80009fa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2242      	movs	r2, #66	; 0x42
 8000a00:	2101      	movs	r1, #1
 8000a02:	5499      	strb	r1, [r3, r2]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2243      	movs	r2, #67	; 0x43
 8000a08:	2101      	movs	r1, #1
 8000a0a:	5499      	strb	r1, [r3, r2]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2244      	movs	r2, #68	; 0x44
 8000a10:	2101      	movs	r1, #1
 8000a12:	5499      	strb	r1, [r3, r2]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2245      	movs	r2, #69	; 0x45
 8000a18:	2101      	movs	r1, #1
 8000a1a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	223d      	movs	r2, #61	; 0x3d
 8000a20:	2101      	movs	r1, #1
 8000a22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	0018      	movs	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	223d      	movs	r2, #61	; 0x3d
 8000a3c:	5c9b      	ldrb	r3, [r3, r2]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d001      	beq.n	8000a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	e03b      	b.n	8000ac0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	223d      	movs	r2, #61	; 0x3d
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <HAL_TIM_Base_Start_IT+0x98>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d00f      	beq.n	8000a8a <HAL_TIM_Base_Start_IT+0x5a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d009      	beq.n	8000a8a <HAL_TIM_Base_Start_IT+0x5a>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a14      	ldr	r2, [pc, #80]	; (8000acc <HAL_TIM_Base_Start_IT+0x9c>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d004      	beq.n	8000a8a <HAL_TIM_Base_Start_IT+0x5a>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <HAL_TIM_Base_Start_IT+0xa0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d111      	bne.n	8000aae <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	2207      	movs	r2, #7
 8000a92:	4013      	ands	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d010      	beq.n	8000abe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000aac:	e007      	b.n	8000abe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b004      	add	sp, #16
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40012c00 	.word	0x40012c00
 8000acc:	40000400 	.word	0x40000400
 8000ad0:	40014000 	.word	0x40014000

08000ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d124      	bne.n	8000b34 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	2202      	movs	r2, #2
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d11d      	bne.n	8000b34 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2203      	movs	r2, #3
 8000afe:	4252      	negs	r2, r2
 8000b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2201      	movs	r2, #1
 8000b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	2203      	movs	r2, #3
 8000b10:	4013      	ands	r3, r2
 8000b12:	d004      	beq.n	8000b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f8fa 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 8000b1c:	e007      	b.n	8000b2e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 f8ed 	bl	8000d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 f8f9 	bl	8000d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d125      	bne.n	8000b8e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	2204      	movs	r2, #4
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d11e      	bne.n	8000b8e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2205      	movs	r2, #5
 8000b56:	4252      	negs	r2, r2
 8000b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	699a      	ldr	r2, [r3, #24]
 8000b66:	23c0      	movs	r3, #192	; 0xc0
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	d004      	beq.n	8000b78 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 f8cd 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 8000b76:	e007      	b.n	8000b88 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 f8c0 	bl	8000d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f8cc 	bl	8000d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	2208      	movs	r2, #8
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d124      	bne.n	8000be6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	d11d      	bne.n	8000be6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2209      	movs	r2, #9
 8000bb0:	4252      	negs	r2, r2
 8000bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	d004      	beq.n	8000bd0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 f8a1 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 8000bce:	e007      	b.n	8000be0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 f894 	bl	8000d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 f8a0 	bl	8000d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	2210      	movs	r2, #16
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b10      	cmp	r3, #16
 8000bf2:	d125      	bne.n	8000c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	2b10      	cmp	r3, #16
 8000c00:	d11e      	bne.n	8000c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2211      	movs	r2, #17
 8000c08:	4252      	negs	r2, r2
 8000c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2208      	movs	r2, #8
 8000c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	69da      	ldr	r2, [r3, #28]
 8000c18:	23c0      	movs	r3, #192	; 0xc0
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	d004      	beq.n	8000c2a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f874 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 8000c28:	e007      	b.n	8000c3a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f000 f867 	bl	8000d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 f873 	bl	8000d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d10f      	bne.n	8000c6e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	2201      	movs	r2, #1
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d108      	bne.n	8000c6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2202      	movs	r2, #2
 8000c62:	4252      	negs	r2, r2
 8000c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff fb0f 	bl	800028c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b80      	cmp	r3, #128	; 0x80
 8000c7a:	d10f      	bne.n	8000c9c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b80      	cmp	r3, #128	; 0x80
 8000c88:	d108      	bne.n	8000c9c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2281      	movs	r2, #129	; 0x81
 8000c90:	4252      	negs	r2, r2
 8000c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f8da 	bl	8000e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	2240      	movs	r2, #64	; 0x40
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b40      	cmp	r3, #64	; 0x40
 8000ca8:	d10f      	bne.n	8000cca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	2240      	movs	r2, #64	; 0x40
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	2b40      	cmp	r3, #64	; 0x40
 8000cb6:	d108      	bne.n	8000cca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2241      	movs	r2, #65	; 0x41
 8000cbe:	4252      	negs	r2, r2
 8000cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 f833 	bl	8000d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b20      	cmp	r3, #32
 8000cd6:	d10f      	bne.n	8000cf8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	2220      	movs	r2, #32
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b20      	cmp	r3, #32
 8000ce4:	d108      	bne.n	8000cf8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2221      	movs	r2, #33	; 0x21
 8000cec:	4252      	negs	r2, r2
 8000cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 f8a4 	bl	8000e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b002      	add	sp, #8
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a34      	ldr	r2, [pc, #208]	; (8000e24 <TIM_Base_SetConfig+0xe4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d008      	beq.n	8000d6a <TIM_Base_SetConfig+0x2a>
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d003      	beq.n	8000d6a <TIM_Base_SetConfig+0x2a>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a30      	ldr	r2, [pc, #192]	; (8000e28 <TIM_Base_SetConfig+0xe8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d108      	bne.n	8000d7c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2270      	movs	r2, #112	; 0x70
 8000d6e:	4393      	bics	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <TIM_Base_SetConfig+0xe4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d018      	beq.n	8000db6 <TIM_Base_SetConfig+0x76>
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d013      	beq.n	8000db6 <TIM_Base_SetConfig+0x76>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <TIM_Base_SetConfig+0xe8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00f      	beq.n	8000db6 <TIM_Base_SetConfig+0x76>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a24      	ldr	r2, [pc, #144]	; (8000e2c <TIM_Base_SetConfig+0xec>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00b      	beq.n	8000db6 <TIM_Base_SetConfig+0x76>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <TIM_Base_SetConfig+0xf0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <TIM_Base_SetConfig+0x76>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <TIM_Base_SetConfig+0xf4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d003      	beq.n	8000db6 <TIM_Base_SetConfig+0x76>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <TIM_Base_SetConfig+0xf8>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d108      	bne.n	8000dc8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <TIM_Base_SetConfig+0xfc>)
 8000dba:	4013      	ands	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	4393      	bics	r3, r2
 8000dce:	001a      	movs	r2, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <TIM_Base_SetConfig+0xe4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d00b      	beq.n	8000e0e <TIM_Base_SetConfig+0xce>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <TIM_Base_SetConfig+0xf0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d007      	beq.n	8000e0e <TIM_Base_SetConfig+0xce>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <TIM_Base_SetConfig+0xf4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d003      	beq.n	8000e0e <TIM_Base_SetConfig+0xce>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <TIM_Base_SetConfig+0xf8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d103      	bne.n	8000e16 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	615a      	str	r2, [r3, #20]
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b004      	add	sp, #16
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	40002000 	.word	0x40002000
 8000e30:	40014000 	.word	0x40014000
 8000e34:	40014400 	.word	0x40014400
 8000e38:	40014800 	.word	0x40014800
 8000e3c:	fffffcff 	.word	0xfffffcff

08000e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <__libc_init_array>:
 8000e60:	b570      	push	{r4, r5, r6, lr}
 8000e62:	2600      	movs	r6, #0
 8000e64:	4c0c      	ldr	r4, [pc, #48]	; (8000e98 <__libc_init_array+0x38>)
 8000e66:	4d0d      	ldr	r5, [pc, #52]	; (8000e9c <__libc_init_array+0x3c>)
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	10a4      	asrs	r4, r4, #2
 8000e6c:	42a6      	cmp	r6, r4
 8000e6e:	d109      	bne.n	8000e84 <__libc_init_array+0x24>
 8000e70:	2600      	movs	r6, #0
 8000e72:	f000 f819 	bl	8000ea8 <_init>
 8000e76:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <__libc_init_array+0x40>)
 8000e78:	4d0a      	ldr	r5, [pc, #40]	; (8000ea4 <__libc_init_array+0x44>)
 8000e7a:	1b64      	subs	r4, r4, r5
 8000e7c:	10a4      	asrs	r4, r4, #2
 8000e7e:	42a6      	cmp	r6, r4
 8000e80:	d105      	bne.n	8000e8e <__libc_init_array+0x2e>
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	00b3      	lsls	r3, r6, #2
 8000e86:	58eb      	ldr	r3, [r5, r3]
 8000e88:	4798      	blx	r3
 8000e8a:	3601      	adds	r6, #1
 8000e8c:	e7ee      	b.n	8000e6c <__libc_init_array+0xc>
 8000e8e:	00b3      	lsls	r3, r6, #2
 8000e90:	58eb      	ldr	r3, [r5, r3]
 8000e92:	4798      	blx	r3
 8000e94:	3601      	adds	r6, #1
 8000e96:	e7f2      	b.n	8000e7e <__libc_init_array+0x1e>
 8000e98:	08000ec0 	.word	0x08000ec0
 8000e9c:	08000ec0 	.word	0x08000ec0
 8000ea0:	08000ec4 	.word	0x08000ec4
 8000ea4:	08000ec0 	.word	0x08000ec0

08000ea8 <_init>:
 8000ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eae:	bc08      	pop	{r3}
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	4770      	bx	lr

08000eb4 <_fini>:
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eba:	bc08      	pop	{r3}
 8000ebc:	469e      	mov	lr, r3
 8000ebe:	4770      	bx	lr
