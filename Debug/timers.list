
timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c08  08000c08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c08  08000c08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c08  08000c08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c08  08000c08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c08  08000c08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08000c1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000c1c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005076  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e29  00000000  00000000  000250ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  00025f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000508  00000000  00000000  000265a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018976  00000000  00000000  00026ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000767b  00000000  00000000  0003f426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000926a0  00000000  00000000  00046aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001704  00000000  00000000  000d9144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000da848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000bf0 	.word	0x08000bf0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08000bf0 	.word	0x08000bf0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

TIM_HandleTypeDef htimer6;


int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_Init();
 8000224:	f000 f8ce 	bl	80003c4 <HAL_Init>
	SystemClockConfig();
 8000228:	f000 f81c 	bl	8000264 <SystemClockConfig>

	GPIO_Init();
 800022c:	f000 f83c 	bl	80002a8 <GPIO_Init>

	TIMER6_Init();
 8000230:	f000 f81e 	bl	8000270 <TIMER6_Init>


	/*
	 * START TÄ°MER
	 *  */
	HAL_TIM_Base_Start(&htimer6);
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <main+0x3c>)
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fbec 	bl	8000a14 <HAL_TIM_Base_Start>

	while(1){
	/*
	 * LOOP UNTÄ°L UPDATE EVENT FLAG SET
	 * */
	while(! (TIM6->SR & TIM_SR_UIF));
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <main+0x40>)
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	2201      	movs	r2, #1
 8000244:	4013      	ands	r3, r2
 8000246:	d0fa      	beq.n	800023e <main+0x1e>
		/*
		 * CLEAR THE FLAG BY SOFTWARE AND TOGGLE LED2
		 * */
		TIM6->SR = 0;
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <main+0x40>)
 800024a:	2200      	movs	r2, #0
 800024c:	611a      	str	r2, [r3, #16]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800024e:	2390      	movs	r3, #144	; 0x90
 8000250:	05db      	lsls	r3, r3, #23
 8000252:	2120      	movs	r1, #32
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fb71 	bl	800093c <HAL_GPIO_TogglePin>
	while(! (TIM6->SR & TIM_SR_UIF));
 800025a:	e7ef      	b.n	800023c <main+0x1c>
 800025c:	20000028 	.word	0x20000028
 8000260:	40001000 	.word	0x40001000

08000264 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <TIMER6_Init>:


void TIMER6_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <TIMER6_Init+0x2c>)
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <TIMER6_Init+0x30>)
 8000278:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 7;
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <TIMER6_Init+0x2c>)
 800027c:	2207      	movs	r2, #7
 800027e:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 60000 - 1;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <TIMER6_Init+0x2c>)
 8000282:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <TIMER6_Init+0x34>)
 8000284:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer6) != HAL_OK)
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <TIMER6_Init+0x2c>)
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fb72 	bl	8000972 <HAL_TIM_Base_Init>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d001      	beq.n	8000296 <TIMER6_Init+0x26>
	{
		Error_handler();
 8000292:	f000 f831 	bl	80002f8 <Error_handler>
	}

}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000028 	.word	0x20000028
 80002a0:	40001000 	.word	0x40001000
 80002a4:	0000ea5f 	.word	0x0000ea5f

080002a8 <GPIO_Init>:

void GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <GPIO_Init+0x4c>)
 80002b0:	695a      	ldr	r2, [r3, #20]
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <GPIO_Init+0x4c>)
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	0289      	lsls	r1, r1, #10
 80002b8:	430a      	orrs	r2, r1
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <GPIO_Init+0x4c>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	029b      	lsls	r3, r3, #10
 80002c4:	4013      	ands	r3, r2
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2220      	movs	r2, #32
 80002ce:	601a      	str	r2, [r3, #0]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2201      	movs	r2, #1
 80002d4:	605a      	str	r2, [r3, #4]
	ledgpio.Pull = GPIO_NOPULL;
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80002dc:	1d3a      	adds	r2, r7, #4
 80002de:	2390      	movs	r3, #144	; 0x90
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	0011      	movs	r1, r2
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 f9b1 	bl	800064c <HAL_GPIO_Init>
}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b006      	add	sp, #24
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	40021000 	.word	0x40021000

080002f8 <Error_handler>:


void Error_handler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	while(1);
 80002fc:	e7fe      	b.n	80002fc <Error_handler+0x4>

080002fe <HAL_MspInit>:
#include "stm32f0xx_hal.h"

void HAL_MspInit(void)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	af00      	add	r7, sp, #0
	//1. Set up yhe priority grouping pf the arm cortex mx processor

	//2. Enable the required system exceptions of the arm cortex mx processor

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(HardFault_IRQn,0,0);
 8000302:	230d      	movs	r3, #13
 8000304:	425b      	negs	r3, r3
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	0018      	movs	r0, r3
 800030c:	f000 f960 	bl	80005d0 <HAL_NVIC_SetPriority>

}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	//1. Enable the clock for TIM6
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000320:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <HAL_TIM_Base_MspInit+0x38>)
 8000322:	69da      	ldr	r2, [r3, #28]
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_TIM_Base_MspInit+0x38>)
 8000326:	2110      	movs	r1, #16
 8000328:	430a      	orrs	r2, r1
 800032a:	61da      	str	r2, [r3, #28]
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <HAL_TIM_Base_MspInit+0x38>)
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	2210      	movs	r2, #16
 8000332:	4013      	ands	r3, r2
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000338:	2011      	movs	r0, #17
 800033a:	f000 f95e 	bl	80005fa <HAL_NVIC_EnableIRQ>

	//3. SET priority
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2100      	movs	r1, #0
 8000342:	2011      	movs	r0, #17
 8000344:	f000 f944 	bl	80005d0 <HAL_NVIC_SetPriority>
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000

08000354 <SysTick_Handler>:
#include <main.h>

void SysTick_Handler (void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000358:	f000 f87c 	bl	8000454 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800035c:	f000 f96a 	bl	8000634 <HAL_SYSTICK_IRQHandler>

}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	; (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000374:	f7ff fff7 	bl	8000366 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	; (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	; (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 fc03 	bl	8000ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ff3d 	bl	8000220 <main>

080003a6 <LoopForever>:

LoopForever:
    b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003b4:	08000c10 	.word	0x08000c10
  ldr r2, =_sbss
 80003b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003bc:	20000074 	.word	0x20000074

080003c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC1_COMP_IRQHandler>
	...

080003c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <HAL_Init+0x24>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HAL_Init+0x24>)
 80003ce:	2110      	movs	r1, #16
 80003d0:	430a      	orrs	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 f809 	bl	80003ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003da:	f7ff ff90 	bl	80002fe <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003de:	2300      	movs	r3, #0
}
 80003e0:	0018      	movs	r0, r3
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	40022000 	.word	0x40022000

080003ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <HAL_InitTick+0x5c>)
 80003f6:	681c      	ldr	r4, [r3, #0]
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <HAL_InitTick+0x60>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	0019      	movs	r1, r3
 80003fe:	23fa      	movs	r3, #250	; 0xfa
 8000400:	0098      	lsls	r0, r3, #2
 8000402:	f7ff fe81 	bl	8000108 <__udivsi3>
 8000406:	0003      	movs	r3, r0
 8000408:	0019      	movs	r1, r3
 800040a:	0020      	movs	r0, r4
 800040c:	f7ff fe7c 	bl	8000108 <__udivsi3>
 8000410:	0003      	movs	r3, r0
 8000412:	0018      	movs	r0, r3
 8000414:	f000 f901 	bl	800061a <HAL_SYSTICK_Config>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800041c:	2301      	movs	r3, #1
 800041e:	e00f      	b.n	8000440 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b03      	cmp	r3, #3
 8000424:	d80b      	bhi.n	800043e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	2301      	movs	r3, #1
 800042a:	425b      	negs	r3, r3
 800042c:	2200      	movs	r2, #0
 800042e:	0018      	movs	r0, r3
 8000430:	f000 f8ce 	bl	80005d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <HAL_InitTick+0x64>)
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800043a:	2300      	movs	r3, #0
 800043c:	e000      	b.n	8000440 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800043e:	2301      	movs	r3, #1
}
 8000440:	0018      	movs	r0, r3
 8000442:	46bd      	mov	sp, r7
 8000444:	b003      	add	sp, #12
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	20000000 	.word	0x20000000
 800044c:	20000008 	.word	0x20000008
 8000450:	20000004 	.word	0x20000004

08000454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <HAL_IncTick+0x1c>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	001a      	movs	r2, r3
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_IncTick+0x20>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	18d2      	adds	r2, r2, r3
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <HAL_IncTick+0x20>)
 8000466:	601a      	str	r2, [r3, #0]
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	20000008 	.word	0x20000008
 8000474:	20000070 	.word	0x20000070

08000478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	0002      	movs	r2, r0
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b7f      	cmp	r3, #127	; 0x7f
 800048a:	d809      	bhi.n	80004a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	001a      	movs	r2, r3
 8000492:	231f      	movs	r3, #31
 8000494:	401a      	ands	r2, r3
 8000496:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <__NVIC_EnableIRQ+0x30>)
 8000498:	2101      	movs	r1, #1
 800049a:	4091      	lsls	r1, r2
 800049c:	000a      	movs	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
  }
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b002      	add	sp, #8
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	e000e100 	.word	0xe000e100

080004ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	0002      	movs	r2, r0
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b7f      	cmp	r3, #127	; 0x7f
 80004c0:	d828      	bhi.n	8000514 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004c2:	4a2f      	ldr	r2, [pc, #188]	; (8000580 <__NVIC_SetPriority+0xd4>)
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b25b      	sxtb	r3, r3
 80004ca:	089b      	lsrs	r3, r3, #2
 80004cc:	33c0      	adds	r3, #192	; 0xc0
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	589b      	ldr	r3, [r3, r2]
 80004d2:	1dfa      	adds	r2, r7, #7
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	0011      	movs	r1, r2
 80004d8:	2203      	movs	r2, #3
 80004da:	400a      	ands	r2, r1
 80004dc:	00d2      	lsls	r2, r2, #3
 80004de:	21ff      	movs	r1, #255	; 0xff
 80004e0:	4091      	lsls	r1, r2
 80004e2:	000a      	movs	r2, r1
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	401a      	ands	r2, r3
 80004e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	019b      	lsls	r3, r3, #6
 80004ee:	22ff      	movs	r2, #255	; 0xff
 80004f0:	401a      	ands	r2, r3
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	0018      	movs	r0, r3
 80004f8:	2303      	movs	r3, #3
 80004fa:	4003      	ands	r3, r0
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000500:	481f      	ldr	r0, [pc, #124]	; (8000580 <__NVIC_SetPriority+0xd4>)
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	b25b      	sxtb	r3, r3
 8000508:	089b      	lsrs	r3, r3, #2
 800050a:	430a      	orrs	r2, r1
 800050c:	33c0      	adds	r3, #192	; 0xc0
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000512:	e031      	b.n	8000578 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000514:	4a1b      	ldr	r2, [pc, #108]	; (8000584 <__NVIC_SetPriority+0xd8>)
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	0019      	movs	r1, r3
 800051c:	230f      	movs	r3, #15
 800051e:	400b      	ands	r3, r1
 8000520:	3b08      	subs	r3, #8
 8000522:	089b      	lsrs	r3, r3, #2
 8000524:	3306      	adds	r3, #6
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	18d3      	adds	r3, r2, r3
 800052a:	3304      	adds	r3, #4
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	1dfa      	adds	r2, r7, #7
 8000530:	7812      	ldrb	r2, [r2, #0]
 8000532:	0011      	movs	r1, r2
 8000534:	2203      	movs	r2, #3
 8000536:	400a      	ands	r2, r1
 8000538:	00d2      	lsls	r2, r2, #3
 800053a:	21ff      	movs	r1, #255	; 0xff
 800053c:	4091      	lsls	r1, r2
 800053e:	000a      	movs	r2, r1
 8000540:	43d2      	mvns	r2, r2
 8000542:	401a      	ands	r2, r3
 8000544:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	019b      	lsls	r3, r3, #6
 800054a:	22ff      	movs	r2, #255	; 0xff
 800054c:	401a      	ands	r2, r3
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	0018      	movs	r0, r3
 8000554:	2303      	movs	r3, #3
 8000556:	4003      	ands	r3, r0
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055c:	4809      	ldr	r0, [pc, #36]	; (8000584 <__NVIC_SetPriority+0xd8>)
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	001c      	movs	r4, r3
 8000564:	230f      	movs	r3, #15
 8000566:	4023      	ands	r3, r4
 8000568:	3b08      	subs	r3, #8
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	430a      	orrs	r2, r1
 800056e:	3306      	adds	r3, #6
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	18c3      	adds	r3, r0, r3
 8000574:	3304      	adds	r3, #4
 8000576:	601a      	str	r2, [r3, #0]
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b003      	add	sp, #12
 800057e:	bd90      	pop	{r4, r7, pc}
 8000580:	e000e100 	.word	0xe000e100
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	1e5a      	subs	r2, r3, #1
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	045b      	lsls	r3, r3, #17
 8000598:	429a      	cmp	r2, r3
 800059a:	d301      	bcc.n	80005a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800059c:	2301      	movs	r3, #1
 800059e:	e010      	b.n	80005c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <SysTick_Config+0x44>)
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	3a01      	subs	r2, #1
 80005a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005a8:	2301      	movs	r3, #1
 80005aa:	425b      	negs	r3, r3
 80005ac:	2103      	movs	r1, #3
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff ff7c 	bl	80004ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <SysTick_Config+0x44>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <SysTick_Config+0x44>)
 80005bc:	2207      	movs	r2, #7
 80005be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	0018      	movs	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	e000e010 	.word	0xe000e010

080005d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
 80005da:	210f      	movs	r1, #15
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	1c02      	adds	r2, r0, #0
 80005e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff5d 	bl	80004ac <__NVIC_SetPriority>
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b004      	add	sp, #16
 80005f8:	bd80      	pop	{r7, pc}

080005fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	0002      	movs	r2, r0
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b25b      	sxtb	r3, r3
 800060c:	0018      	movs	r0, r3
 800060e:	f7ff ff33 	bl	8000478 <__NVIC_EnableIRQ>
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b002      	add	sp, #8
 8000618:	bd80      	pop	{r7, pc}

0800061a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	0018      	movs	r0, r3
 8000626:	f7ff ffaf 	bl	8000588 <SysTick_Config>
 800062a:	0003      	movs	r3, r0
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}

08000634 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000638:	f000 f803 	bl	8000642 <HAL_SYSTICK_Callback>
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800065a:	e155      	b.n	8000908 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2101      	movs	r1, #1
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	4091      	lsls	r1, r2
 8000666:	000a      	movs	r2, r1
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d100      	bne.n	8000674 <HAL_GPIO_Init+0x28>
 8000672:	e146      	b.n	8000902 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	2203      	movs	r2, #3
 800067a:	4013      	ands	r3, r2
 800067c:	2b01      	cmp	r3, #1
 800067e:	d005      	beq.n	800068c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	2203      	movs	r2, #3
 8000686:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000688:	2b02      	cmp	r3, #2
 800068a:	d130      	bne.n	80006ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	2203      	movs	r2, #3
 8000698:	409a      	lsls	r2, r3
 800069a:	0013      	movs	r3, r2
 800069c:	43da      	mvns	r2, r3
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	68da      	ldr	r2, [r3, #12]
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	409a      	lsls	r2, r3
 80006ae:	0013      	movs	r3, r2
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006c2:	2201      	movs	r2, #1
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	409a      	lsls	r2, r3
 80006c8:	0013      	movs	r3, r2
 80006ca:	43da      	mvns	r2, r3
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	4013      	ands	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	091b      	lsrs	r3, r3, #4
 80006d8:	2201      	movs	r2, #1
 80006da:	401a      	ands	r2, r3
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	409a      	lsls	r2, r3
 80006e0:	0013      	movs	r3, r2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	2203      	movs	r2, #3
 80006f4:	4013      	ands	r3, r2
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d017      	beq.n	800072a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	2203      	movs	r2, #3
 8000706:	409a      	lsls	r2, r3
 8000708:	0013      	movs	r3, r2
 800070a:	43da      	mvns	r2, r3
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	4013      	ands	r3, r2
 8000710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	409a      	lsls	r2, r3
 800071c:	0013      	movs	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	4313      	orrs	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	2203      	movs	r2, #3
 8000730:	4013      	ands	r3, r2
 8000732:	2b02      	cmp	r3, #2
 8000734:	d123      	bne.n	800077e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08da      	lsrs	r2, r3, #3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3208      	adds	r2, #8
 800073e:	0092      	lsls	r2, r2, #2
 8000740:	58d3      	ldr	r3, [r2, r3]
 8000742:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2207      	movs	r2, #7
 8000748:	4013      	ands	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	220f      	movs	r2, #15
 800074e:	409a      	lsls	r2, r3
 8000750:	0013      	movs	r3, r2
 8000752:	43da      	mvns	r2, r3
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	4013      	ands	r3, r2
 8000758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	691a      	ldr	r2, [r3, #16]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2107      	movs	r1, #7
 8000762:	400b      	ands	r3, r1
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	409a      	lsls	r2, r3
 8000768:	0013      	movs	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4313      	orrs	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	08da      	lsrs	r2, r3, #3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3208      	adds	r2, #8
 8000778:	0092      	lsls	r2, r2, #2
 800077a:	6939      	ldr	r1, [r7, #16]
 800077c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	2203      	movs	r2, #3
 800078a:	409a      	lsls	r2, r3
 800078c:	0013      	movs	r3, r2
 800078e:	43da      	mvns	r2, r3
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4013      	ands	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2203      	movs	r2, #3
 800079c:	401a      	ands	r2, r3
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0013      	movs	r3, r2
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	23c0      	movs	r3, #192	; 0xc0
 80007b8:	029b      	lsls	r3, r3, #10
 80007ba:	4013      	ands	r3, r2
 80007bc:	d100      	bne.n	80007c0 <HAL_GPIO_Init+0x174>
 80007be:	e0a0      	b.n	8000902 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c0:	4b57      	ldr	r3, [pc, #348]	; (8000920 <HAL_GPIO_Init+0x2d4>)
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	4b56      	ldr	r3, [pc, #344]	; (8000920 <HAL_GPIO_Init+0x2d4>)
 80007c6:	2101      	movs	r1, #1
 80007c8:	430a      	orrs	r2, r1
 80007ca:	619a      	str	r2, [r3, #24]
 80007cc:	4b54      	ldr	r3, [pc, #336]	; (8000920 <HAL_GPIO_Init+0x2d4>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4013      	ands	r3, r2
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80007d8:	4a52      	ldr	r2, [pc, #328]	; (8000924 <HAL_GPIO_Init+0x2d8>)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	089b      	lsrs	r3, r3, #2
 80007de:	3302      	adds	r3, #2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	589b      	ldr	r3, [r3, r2]
 80007e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	2203      	movs	r2, #3
 80007ea:	4013      	ands	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	220f      	movs	r2, #15
 80007f0:	409a      	lsls	r2, r3
 80007f2:	0013      	movs	r3, r2
 80007f4:	43da      	mvns	r2, r3
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	4013      	ands	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	2390      	movs	r3, #144	; 0x90
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	429a      	cmp	r2, r3
 8000804:	d019      	beq.n	800083a <HAL_GPIO_Init+0x1ee>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a47      	ldr	r2, [pc, #284]	; (8000928 <HAL_GPIO_Init+0x2dc>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d013      	beq.n	8000836 <HAL_GPIO_Init+0x1ea>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a46      	ldr	r2, [pc, #280]	; (800092c <HAL_GPIO_Init+0x2e0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d00d      	beq.n	8000832 <HAL_GPIO_Init+0x1e6>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a45      	ldr	r2, [pc, #276]	; (8000930 <HAL_GPIO_Init+0x2e4>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d007      	beq.n	800082e <HAL_GPIO_Init+0x1e2>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a44      	ldr	r2, [pc, #272]	; (8000934 <HAL_GPIO_Init+0x2e8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_GPIO_Init+0x1de>
 8000826:	2304      	movs	r3, #4
 8000828:	e008      	b.n	800083c <HAL_GPIO_Init+0x1f0>
 800082a:	2305      	movs	r3, #5
 800082c:	e006      	b.n	800083c <HAL_GPIO_Init+0x1f0>
 800082e:	2303      	movs	r3, #3
 8000830:	e004      	b.n	800083c <HAL_GPIO_Init+0x1f0>
 8000832:	2302      	movs	r3, #2
 8000834:	e002      	b.n	800083c <HAL_GPIO_Init+0x1f0>
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <HAL_GPIO_Init+0x1f0>
 800083a:	2300      	movs	r3, #0
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	2103      	movs	r1, #3
 8000840:	400a      	ands	r2, r1
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	4093      	lsls	r3, r2
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	4313      	orrs	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800084c:	4935      	ldr	r1, [pc, #212]	; (8000924 <HAL_GPIO_Init+0x2d8>)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	089b      	lsrs	r3, r3, #2
 8000852:	3302      	adds	r3, #2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800085a:	4b37      	ldr	r3, [pc, #220]	; (8000938 <HAL_GPIO_Init+0x2ec>)
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	43da      	mvns	r2, r3
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	4013      	ands	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	035b      	lsls	r3, r3, #13
 8000872:	4013      	ands	r3, r2
 8000874:	d003      	beq.n	800087e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4313      	orrs	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <HAL_GPIO_Init+0x2ec>)
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <HAL_GPIO_Init+0x2ec>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	43da      	mvns	r2, r3
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	039b      	lsls	r3, r3, #14
 800089c:	4013      	ands	r3, r2
 800089e:	d003      	beq.n	80008a8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <HAL_GPIO_Init+0x2ec>)
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <HAL_GPIO_Init+0x2ec>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	43da      	mvns	r2, r3
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	4013      	ands	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685a      	ldr	r2, [r3, #4]
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	029b      	lsls	r3, r3, #10
 80008c6:	4013      	ands	r3, r2
 80008c8:	d003      	beq.n	80008d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_GPIO_Init+0x2ec>)
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <HAL_GPIO_Init+0x2ec>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	43da      	mvns	r2, r3
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	025b      	lsls	r3, r3, #9
 80008f0:	4013      	ands	r3, r2
 80008f2:	d003      	beq.n	80008fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_GPIO_Init+0x2ec>)
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	40da      	lsrs	r2, r3
 8000910:	1e13      	subs	r3, r2, #0
 8000912:	d000      	beq.n	8000916 <HAL_GPIO_Init+0x2ca>
 8000914:	e6a2      	b.n	800065c <HAL_GPIO_Init+0x10>
  } 
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b006      	add	sp, #24
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	40010000 	.word	0x40010000
 8000928:	48000400 	.word	0x48000400
 800092c:	48000800 	.word	0x48000800
 8000930:	48000c00 	.word	0x48000c00
 8000934:	48001000 	.word	0x48001000
 8000938:	40010400 	.word	0x40010400

0800093c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	000a      	movs	r2, r1
 8000946:	1cbb      	adds	r3, r7, #2
 8000948:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000950:	1cbb      	adds	r3, r7, #2
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4013      	ands	r3, r2
 8000958:	041a      	lsls	r2, r3, #16
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	43db      	mvns	r3, r3
 800095e:	1cb9      	adds	r1, r7, #2
 8000960:	8809      	ldrh	r1, [r1, #0]
 8000962:	400b      	ands	r3, r1
 8000964:	431a      	orrs	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	619a      	str	r2, [r3, #24]
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d101      	bne.n	8000984 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	e042      	b.n	8000a0a <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	223d      	movs	r2, #61	; 0x3d
 8000988:	5c9b      	ldrb	r3, [r3, r2]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d107      	bne.n	80009a0 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	223c      	movs	r2, #60	; 0x3c
 8000994:	2100      	movs	r1, #0
 8000996:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff fcbc 	bl	8000318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	223d      	movs	r2, #61	; 0x3d
 80009a4:	2102      	movs	r1, #2
 80009a6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3304      	adds	r3, #4
 80009b0:	0019      	movs	r1, r3
 80009b2:	0010      	movs	r0, r2
 80009b4:	f000 f878 	bl	8000aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2246      	movs	r2, #70	; 0x46
 80009bc:	2101      	movs	r1, #1
 80009be:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	223e      	movs	r2, #62	; 0x3e
 80009c4:	2101      	movs	r1, #1
 80009c6:	5499      	strb	r1, [r3, r2]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	223f      	movs	r2, #63	; 0x3f
 80009cc:	2101      	movs	r1, #1
 80009ce:	5499      	strb	r1, [r3, r2]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2240      	movs	r2, #64	; 0x40
 80009d4:	2101      	movs	r1, #1
 80009d6:	5499      	strb	r1, [r3, r2]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2241      	movs	r2, #65	; 0x41
 80009dc:	2101      	movs	r1, #1
 80009de:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2242      	movs	r2, #66	; 0x42
 80009e4:	2101      	movs	r1, #1
 80009e6:	5499      	strb	r1, [r3, r2]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2243      	movs	r2, #67	; 0x43
 80009ec:	2101      	movs	r1, #1
 80009ee:	5499      	strb	r1, [r3, r2]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2244      	movs	r2, #68	; 0x44
 80009f4:	2101      	movs	r1, #1
 80009f6:	5499      	strb	r1, [r3, r2]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2245      	movs	r2, #69	; 0x45
 80009fc:	2101      	movs	r1, #1
 80009fe:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	223d      	movs	r2, #61	; 0x3d
 8000a04:	2101      	movs	r1, #1
 8000a06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	223d      	movs	r2, #61	; 0x3d
 8000a20:	5c9b      	ldrb	r3, [r3, r2]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d001      	beq.n	8000a2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e033      	b.n	8000a94 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	223d      	movs	r2, #61	; 0x3d
 8000a30:	2102      	movs	r1, #2
 8000a32:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_TIM_Base_Start+0x88>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d00f      	beq.n	8000a5e <HAL_TIM_Base_Start+0x4a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d009      	beq.n	8000a5e <HAL_TIM_Base_Start+0x4a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_TIM_Base_Start+0x8c>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d004      	beq.n	8000a5e <HAL_TIM_Base_Start+0x4a>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <HAL_TIM_Base_Start+0x90>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d111      	bne.n	8000a82 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2207      	movs	r2, #7
 8000a66:	4013      	ands	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b06      	cmp	r3, #6
 8000a6e:	d010      	beq.n	8000a92 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000a80:	e007      	b.n	8000a92 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b004      	add	sp, #16
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40012c00 	.word	0x40012c00
 8000aa0:	40000400 	.word	0x40000400
 8000aa4:	40014000 	.word	0x40014000

08000aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a34      	ldr	r2, [pc, #208]	; (8000b8c <TIM_Base_SetConfig+0xe4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d008      	beq.n	8000ad2 <TIM_Base_SetConfig+0x2a>
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d003      	beq.n	8000ad2 <TIM_Base_SetConfig+0x2a>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a30      	ldr	r2, [pc, #192]	; (8000b90 <TIM_Base_SetConfig+0xe8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d108      	bne.n	8000ae4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2270      	movs	r2, #112	; 0x70
 8000ad6:	4393      	bics	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a29      	ldr	r2, [pc, #164]	; (8000b8c <TIM_Base_SetConfig+0xe4>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d018      	beq.n	8000b1e <TIM_Base_SetConfig+0x76>
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d013      	beq.n	8000b1e <TIM_Base_SetConfig+0x76>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <TIM_Base_SetConfig+0xe8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d00f      	beq.n	8000b1e <TIM_Base_SetConfig+0x76>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <TIM_Base_SetConfig+0xec>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d00b      	beq.n	8000b1e <TIM_Base_SetConfig+0x76>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <TIM_Base_SetConfig+0xf0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d007      	beq.n	8000b1e <TIM_Base_SetConfig+0x76>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <TIM_Base_SetConfig+0xf4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d003      	beq.n	8000b1e <TIM_Base_SetConfig+0x76>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <TIM_Base_SetConfig+0xf8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d108      	bne.n	8000b30 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <TIM_Base_SetConfig+0xfc>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	4393      	bics	r3, r2
 8000b36:	001a      	movs	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <TIM_Base_SetConfig+0xe4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d00b      	beq.n	8000b76 <TIM_Base_SetConfig+0xce>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <TIM_Base_SetConfig+0xf0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d007      	beq.n	8000b76 <TIM_Base_SetConfig+0xce>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <TIM_Base_SetConfig+0xf4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d003      	beq.n	8000b76 <TIM_Base_SetConfig+0xce>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <TIM_Base_SetConfig+0xf8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d103      	bne.n	8000b7e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	691a      	ldr	r2, [r3, #16]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	615a      	str	r2, [r3, #20]
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40012c00 	.word	0x40012c00
 8000b90:	40000400 	.word	0x40000400
 8000b94:	40002000 	.word	0x40002000
 8000b98:	40014000 	.word	0x40014000
 8000b9c:	40014400 	.word	0x40014400
 8000ba0:	40014800 	.word	0x40014800
 8000ba4:	fffffcff 	.word	0xfffffcff

08000ba8 <__libc_init_array>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	2600      	movs	r6, #0
 8000bac:	4c0c      	ldr	r4, [pc, #48]	; (8000be0 <__libc_init_array+0x38>)
 8000bae:	4d0d      	ldr	r5, [pc, #52]	; (8000be4 <__libc_init_array+0x3c>)
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	10a4      	asrs	r4, r4, #2
 8000bb4:	42a6      	cmp	r6, r4
 8000bb6:	d109      	bne.n	8000bcc <__libc_init_array+0x24>
 8000bb8:	2600      	movs	r6, #0
 8000bba:	f000 f819 	bl	8000bf0 <_init>
 8000bbe:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <__libc_init_array+0x40>)
 8000bc0:	4d0a      	ldr	r5, [pc, #40]	; (8000bec <__libc_init_array+0x44>)
 8000bc2:	1b64      	subs	r4, r4, r5
 8000bc4:	10a4      	asrs	r4, r4, #2
 8000bc6:	42a6      	cmp	r6, r4
 8000bc8:	d105      	bne.n	8000bd6 <__libc_init_array+0x2e>
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	00b3      	lsls	r3, r6, #2
 8000bce:	58eb      	ldr	r3, [r5, r3]
 8000bd0:	4798      	blx	r3
 8000bd2:	3601      	adds	r6, #1
 8000bd4:	e7ee      	b.n	8000bb4 <__libc_init_array+0xc>
 8000bd6:	00b3      	lsls	r3, r6, #2
 8000bd8:	58eb      	ldr	r3, [r5, r3]
 8000bda:	4798      	blx	r3
 8000bdc:	3601      	adds	r6, #1
 8000bde:	e7f2      	b.n	8000bc6 <__libc_init_array+0x1e>
 8000be0:	08000c08 	.word	0x08000c08
 8000be4:	08000c08 	.word	0x08000c08
 8000be8:	08000c0c 	.word	0x08000c0c
 8000bec:	08000c08 	.word	0x08000c08

08000bf0 <_init>:
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf6:	bc08      	pop	{r3}
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	4770      	bx	lr

08000bfc <_fini>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c02:	bc08      	pop	{r3}
 8000c04:	469e      	mov	lr, r3
 8000c06:	4770      	bx	lr
